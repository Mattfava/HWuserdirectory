{"version":3,"sources":["components/header.js","components/row.js","components/table.js","components/footer.js","employeeData.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Row","props","name","title","department","startDate","Table","filter","employeeData","toLowerCase","includes","search","map","start_date","Footer","App","useState","setSearch","value","onChange","evt","target","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPASeA,MAPf,WACI,OACA,yBAAKC,UAAU,UACX,oDCgBOC,MAnBf,SAAaC,GACT,OACI,4BACI,wBAAIF,UAAY,MACXE,EAAMC,MAEX,wBAAIH,UAAY,OACXE,EAAME,OAEX,wBAAIJ,UAAY,MACXE,EAAMG,YAEX,wBAAIL,UAAY,OACXE,EAAMI,aCqBRC,MA/Bf,SAAeL,GACX,IAAIM,EAASN,EAAMO,aAAaD,QAAO,SAACC,GAAD,OACvCA,EAAaN,KAAKO,cAAcC,SAAST,EAAMU,OAAOF,kBAGtD,OACI,yBAAKV,UAAU,SACX,2BAAOA,UAAU,WACT,oCAGA,qCAGA,0CAGA,0CAGHQ,EAAOK,KAAI,SAAAJ,GAAY,OAAI,kBAAC,EAAD,CAAKN,KAAMM,EAAaN,KAAMC,MAAOK,EAAaL,MAAOC,WAAYI,EAAaJ,WAAYC,UAAWG,EAAaK,mBCjBnJC,MANf,WACI,OACI,kCCmCON,EAvCM,CACjB,CACIN,KAAM,mBACNC,MAAO,aACPC,WAAY,UACZS,WAAY,cAEhB,CACIX,KAAM,WACNC,MAAO,sBACPC,WAAY,cACZS,WAAY,cAEhB,CACIX,KAAM,YACNC,MAAO,eACPC,WAAY,OACZS,WAAY,cAEhB,CACIX,KAAM,cACNC,MAAO,sBACPC,WAAY,cACZS,WAAY,cAEhB,CACIX,KAAM,kBACNC,MAAO,aACPC,WAAY,UACZS,WAAY,cAEhB,CACIX,KAAM,kBACNC,MAAO,uBACPC,WAAY,iBACZS,WAAY,eCHLE,MArBf,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAEPL,EAFO,KAECM,EAFD,KAIb,OACE,6BACE,yBAAKlB,UAAU,WACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOS,aAAcA,EAAcG,OAAQA,IAE3C,8DAEA,2BAAOO,MAAOP,EAAQQ,SAAU,SAACC,GAAD,OAAQH,EAAUG,EAAIC,OAAOH,QAAQI,YAAY,WAGjF,kBAAC,EAAD,QCdcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9aaf2909.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../App.css\"\r\nfunction Header(){\r\n    return (\r\n    <div className=\"header\">\r\n        <h4>Employee Directory</h4>\r\n    </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport \"../App.css\"\r\nfunction Row(props){\r\n    return(\r\n        <tr>\r\n            <td className = \"td\" >\r\n                {props.name}\r\n            </td>\r\n            <td className = \"td2\">\r\n                {props.title}\r\n            </td>\r\n            <td className = \"td\">\r\n                {props.department}\r\n            </td>\r\n            <td className = \"td2\">\r\n                {props.startDate}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from './row'\r\nimport \"../App.css\"\r\n\r\n\r\nfunction Table(props) {\r\n    var filter = props.employeeData.filter((employeeData)=>\r\n    employeeData.name.toLowerCase().includes(props.search.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <div className=\"table\">\r\n            <table className=\"myTable\">\r\n                    <th>\r\n                        Name\r\n                    </th>\r\n                    <th>\r\n                        Title\r\n                     </th>\r\n                    <th>\r\n                        Department\r\n                    </th>\r\n                    <th>\r\n                        Start Date\r\n                    </th>\r\n                {filter.map(employeeData => <Row name={employeeData.name} title={employeeData.title} department={employeeData.department} startDate={employeeData.start_date} />)}\r\n            \r\n    </table>\r\n    </div>\r\n\r\n   \r\n    )}\r\n    \r\n\r\n\r\n\r\nexport default Table;","import React from 'react';\r\nimport \"../App.css\"\r\nfunction Footer(){\r\n    return(\r\n        <footer/>\r\n    )\r\n}\r\n\r\nexport default Footer;","const employeeData = [\r\n    {\r\n        name: \"Matt Huginbother\",\r\n        title: \"Accountant\",\r\n        department: \"Finance\",\r\n        start_date: \"07-12-2012\"\r\n    },\r\n    {\r\n        name: \"Jane Roe\",\r\n        title: \"Front End Developer\",\r\n        department: \"Development\",\r\n        start_date: \"05-31-2009\"\r\n    },\r\n    {\r\n        name: \"John Sage\",\r\n        title: \"Data Analyst\",\r\n        department: \"Data\",\r\n        start_date: \"10-23-2005\"\r\n    },\r\n    {\r\n        name: \"Rem Pheonix\",\r\n        title: \"Front End Developer\",\r\n        department: \"Development\",\r\n        start_date: \"08-12-2019\"\r\n    },\r\n    {\r\n        name: \"James Rothsberg\",\r\n        title: \"Accountant\",\r\n        department: \"Finance\",\r\n        start_date: \"07-23-1989\"\r\n    },\r\n    {\r\n        name: \"Cheyene Bersney\",\r\n        title: \"Office Administrator\",\r\n        department: \"Administration\",\r\n        start_date: \"06-10-2012\"\r\n    },\r\n  ]\r\n\r\nexport default employeeData; \r\n","import React ,{useState}from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Table from './components/table';\nimport Footer from './components/footer';\nimport employeeData from './employeeData';\n\n\n\n\n\nfunction App() {\n\n  const[search, setSearch]=useState(\"\");\n\n  return (\n    <div>\n      <div className=\"wrapper\">\n      <Header></Header>\n      <Table employeeData={employeeData} search={search}>\n      </Table>\n      <form>\n        Search for Employees by name:\n      <input value={search} onChange={(evt)=> setSearch(evt.target.value)} placeholder=\"name\"></input>\n      </form>\n      </div>\n      <Footer></Footer>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}